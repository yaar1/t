///IsPanagram

package com.company;

import java.util.*;

public class Main{

    public static boolean isPanagram(StringBuffer str){

        boolean arr[]=new boolean[26];

        for(int i=0;i<str.length();i++){

            char ch=str.charAt(i);

            int index;

            if(ch>='A' && ch<='Z'){

                //uppercase

                index=ch-'A';

            }else if(ch>='a' && ch<='z'){

                //lowercase

                index=ch-'a';

            }

            else{

                continue;

            }

            arr[index]=true;

        }

        for(int i=0;i<26;i++){

            if(arr[i]==false){

                return false;

            }

        }

        return true;

    }

    public static void main(String[] args)

    {

        Scanner sc=new Scanner(System.in);

        StringBuffer str=new StringBuffer(sc.nextLine());

        if(isPanagram(str)){

            System.out.println("TRUE");

        }else{

            System.out.println("False");

        }

    }

}

///IsIsomorphic

package com.company;

import java.util.*;

public class Main{

    public static boolean isIsomorphic(StringBuffer str1,StringBuffer str2){

        int n=str1.length();

        int m=str2.length();

        if(n!=m){

            return false;

        }

        HashMap<Character,Character>map=new HashMap<>();

        for(int i=0;i<n;i++){

            char ch1=str1.charAt(i);

            char ch2=str2.charAt(i);

            if(map.containsKey(ch1)){

                if(map.get(ch1)!=ch2){

                    return false;

                }

            }

            else if(!map.containsKey(ch1) && !map.containsValue(ch2)){

                map.put(ch1,ch2);

            }

            else{

                return false;

            }

        }

        return true;

    }

    public static void main(String[] args)

    {

        Scanner sc=new Scanner(System.in);

        StringBuffer str1=new StringBuffer(sc.next());

        StringBuffer str2=new StringBuffer(sc.next());

        if(isIsomorphic(str1,str2)){

            System.out.println("TRUE");

        }else{

            System.out.println("False");

        }

    }

}

/// Encrypt the String

package com.company;

import java.util.*;

public class Main{

    public static String reverse(String str){

        char arr[]=str.toCharArray();

        int i=0;

        int j=str.length()-1;

        while(i<j){

            char temp=arr[i];

            arr[i]=arr[j];

            arr[j]=temp;

            i++;

            j--;

        }

        return new String(arr);

    }

    public static String convertToHex(int n){

        String res="";

        while (n!=0){

            int dig=n%16;

            if(dig<10){

                char ch=(char)(dig+48);

                res+=ch;

            }

            else{

                char ch=(char)(dig+87);

                res+=ch;

            }

            n=n/16;

        }

        return res;

    }

    public static String solve(String str){

        String res="";

        int n=str.length();

        for(int i=0;i<n;i++){

            char ch=str.charAt(i);

            int count=0;

            while(i<n && ch==str.charAt(i)){

                count++;

                i++;

            }

            i--;

            String hex=convertToHex(count);

            res+=ch;

            res+=hex;

        }

        return reverse(res);

    }

    public static void main(String[] args)

    {

        Scanner sc=new Scanner(System.in);

        String str=sc.next();

        String ans=solve(str);

        System.out.println(ans);

    }

}

/// Roman to Integer

package com.company;

import java.util.*;

public class Main{

    public static int value(char ch){

        if(ch == 'I') return 1;

        if(ch == 'V') return 5;

        if(ch == 'X') return 10;

        if(ch == 'L') return 50;

        if(ch == 'C') return 100;

        if(ch == 'D') return 500;

        if(ch == 'M') return 1000;

        return -1;

    }

    public static int romanToInt(StringBuffer s) {

        int sum=0;

        for(int i=0;i<s.length();i++)

        {

            if(i==s.length()-1){

                sum+=value(s.charAt(i));

            }

            else{

                int curr=value(s.charAt(i));

                int next=value(s.charAt(i+1));

                if(curr>=next){

                    sum+=curr;

                }else{

                    sum-=curr;

                }

            }

        }

        return sum;

    }

    public static void main(String[] args)

    {

        Scanner sc=new Scanner(System.in);

        StringBuffer str=new StringBuffer(sc.next());

        int ans=romanToInt(str);

        System.out.println(ans);

    }

}

///Binary and iteration

package com.company;

import java.util.*;

public class Main{

    public static String convertToBinary(int n){

        String str="";

        while(n!=0){

            int dig=n%2;

            str+=Integer.toString(dig);

            n=n/2;

        }

        return str;

    }

    public static int solve(int m,int n,int i){

        String binary=convertToBinary(m);

        for(int j=0;j<n;j++){

            String str="";

            for(int k=0;k<binary.length();k++){

                if(binary.charAt(k)=='0'){

                    str+="01";

                }

                else{

                    str+="10";

                }

            }

            binary=str;

        }

        return binary.charAt(i)-'0';

    }

    public static void main(String[] args)

    {

        Scanner sc=new Scanner(System.in);

        int m=sc.nextInt();

        int n=sc.nextInt();

        int i=sc.nextInt();

        int ans=solve(m,n,i);

        System.out.println(ans);

    }

}

///Longest Common Prefix

package com.company;

import java.util.*;

public class Main{

    public static String longestCommonPrefix(String[] arr){

        int n=arr.length;

        if(n==0){

            return "";

        }

        if(n==1){

            return arr[0];

        }

        Arrays.sort(arr);

        int end=Math.min(arr[0].length(),arr[n-1].length());

        int i=0;

        while(i<end && arr[0].charAt(i)==arr[n-1].charAt(i)){

            i++;

        }

        String res=arr[0].substring(0,i);

        return res;

    }

    public static void main(String[] args)

    {

        Scanner sc=new Scanner(System.in);

        int n=sc.nextInt();

        String arr[]=new String[n];

        for(int i=0;i<n;i++){

            arr[i]=sc.next();

        }

        String ans=longestCommonPrefix(arr);

        System.out.println(ans);

    }

}
