////Isomorphic Character String
#include<bits/stdc++.h>
using namespace std;
bool solve(string s1,string s2){
    unordered_map<char,char>map;
    if(s1.length()!=s2.length()){
        return false;
    }
    for(int i=0;i<s1.length();i++){
        if(map.find(s1[i])!=map.end()){
            if(map[s1[i]]!=s2[i]){
                return false;
            }
        }
        else{
            map[s1[i]]=s2[i];
        }
    }
    return true;
}
int main()
{
    string s1;
    string s2;
    cin>>s1;
    cin>>s2;
    bool ans=solve(s1,s2);
    if(ans){
        cout<<"True"<<endl;
    }
    else{
        cout<<"False"<<endl;
    }
    return 0;
}






///IsoMorphic Word String
#include<bits/stdc++.h>
using namespace std;
bool solve(string s1,string s2){
    unordered_map<string,char>map;
    int i=0;
    int j=0;
    while(i<s1.length()){
        string word="";
        word+=s1[i];
        i++;
        while(s1[i]>='a' && s1[i]<='z'){
            word+=s1[i];
            i++;
        }
        if(map.find(word)!=map.end()){
            if(map[word]!=s2[j]){
                return false;
            }
            j++;
        }
        else{
            map[word]=s2[j];
            j++;
        }
    }
    return true;
}
int main()
{
    string s1;
    string s2;
    cin>>s1;
    cin>>s2;
    bool ans=solve(s1,s2);
    if(ans){
        cout<<"True"<<endl;
    }
    else{
        cout<<"False"<<endl;
    }
    return 0;
}



////Longest Increasing Subsequence
#include<bits/stdc++.h>
using namespace std;
int solve(vector<int>& arr,int n,int i,int prev,vector<vector<int>>& dp){
    if(i==n){
        return 0;
    }
    if(dp[i][prev+1]!=-1){
        return dp[i][prev+1];
    }
    int inc=0;
    if(prev==-1 || arr[i]>arr[prev]){
        inc=1+solve(arr,n,i+1,i,dp);
    }
    int exc=solve(arr,n,i+1,prev,dp);
    dp[i][prev+1]=max(inc,exc);
    return dp[i][prev+1];
}
int LIS(vector<int>& arr,int n)
{
    vector<vector<int>> dp(n+1,vector<int>(n+1,-1));
    return solve(arr,n,0,-1,dp);
}
int main()
{
    int n;
    cin>>n;
    vector<int> arr(n);
    for(int i=0;i<n;i++){
        cin>>arr[i];
    }
    int ans=LIS(arr,n);
    cout<<ans<<endl;
    return 0;
}



///Maximum Length Path
#include<bits/stdc++.h>
using namespace std;
int solve(vector<vector<int>>& arr,int n,int m,int i,int j,vector<vector<int>>& dp){
    if(i<0 || j<0 || i>=n || j>=m){
        return 0;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int top=INT_MIN,bottom=INT_MIN,left=INT_MIN,right=INT_MIN;
    if(i>0 && arr[i][j]+1==arr[i-1][j]){
        //top
        top=1+solve(arr,n,m,i-1,j,dp);
    }
    if(i<n-1 && arr[i][j]+1==arr[i+1][j]){
        //bottom
        bottom=1+solve(arr,n,m,i+1,j,dp);
    }
    if(j<m-1 && arr[i][j]+1==arr[i][j+1]){
        //right
        right=1+solve(arr,n,m,i,j+1,dp);
    }
    if(j>0 && arr[i][j]+1==arr[i][j-1]){
        //left
        left=1+solve(arr,n,m,i,j-1,dp);
    }
    dp[i][j]=max(top,max(bottom,max(left,max(right,1))));
    return dp[i][j];
}
int FindMaxLength(vector<vector<int>>& arr,int n,int m){
    int maxi=1;
    vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            int ans=solve(arr,n,m,i,j,dp);
            maxi=max(maxi,ans);
        }
    }
    return maxi;
}
int main()
{
    int n,m;
    cin>>n>>m;
    vector<vector<int>> mat(n,vector<int>(m));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>mat[i][j];
        }
    }
    int ans=FindMaxLength(mat,n,m);
    cout<<ans<<endl;
    return 0;
}



///Minimum Cost
#include<bits/stdc++.h>
using namespace std;
int solve(vector<vector<int>>& arr,int n,int m,int i,int j,vector<vector<int>>& dp){
    if(i==0 && j==0){
        return arr[0][0];
    }
    if(i<0 || j<0){
        return INT_MAX;
    }
    if(dp[i][j]!=-1){
        return dp[i][j];
    }
    int top=solve(arr,n,m,i-1,j,dp);
    int left=solve(arr,n,m,i,j-1,dp);
    dp[i][j]=arr[i][j]+min(top,left);
    return dp[i][j];
}
int MinCost(vector<vector<int>>& arr,int n,int m){
    vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
    return solve(arr,n,m,n-1,m-1,dp);
}
int main()
{
    int n,m;
    cin>>n>>m;
    vector<vector<int>> arr(n,vector<int>(m));
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cin>>arr[i][j];
        }
    }
    int ans=MinCost(arr,n,m);
    cout<<ans<<endl;
    return 0;
}



////Minimum Operations Needed
#include<bits/stdc++.h>
using namespace std;
int solve(int n,int sum,vector<int>&dp){
    if(sum==n){
        return 0;
    }
    if(sum>n){
        return INT_MAX;
    }
    if(dp[sum]!=-1){
        return dp[sum];
    }
    //add
    int add=solve(n,sum+1,dp);
    //mutiply
    int mult=INT_MAX;
    if(sum!=0){
        mult=solve(n,sum*2,dp);
    }
    // cout<<n<<" "<<sum<<endl;
    dp[sum]=1+min(add,mult);
    return dp[sum];
}
int MinOperation(int n){
    vector<int> dp(n+1,-1);
    return solve(n,0,dp);
}
int main()
{
    int n;
    cin>>n;
    int ans=MinOperation(n);
    cout<<ans<<endl;
    return 0;
}
